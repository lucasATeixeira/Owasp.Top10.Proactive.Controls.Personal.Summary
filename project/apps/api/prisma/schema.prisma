// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// generator client {
//   provider = "prisma-client-js"
// }

generator kysely {
    provider = "prisma-kysely"
    // Optionally provide a destination directory for the generated file
    // and a filename of your choice
    output = "../src/db"
    fileName = "types.ts"
    // Optionally generate runtime enums to a separate file
    enumFileName = "enums.ts"
    readOnlyIds = true
    
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum Role {
  ADMIN
  PRO_USER
  USER
}

enum WorkspaceDomain {
  Post
  Ban
}

enum WorkspacePermission {
  manage
  create
  get
  update
  delete
}

model User {
  id        String   @id  
  name      String
  email     String   @unique
  role Role
  password  String
  /// @kyselyType(Date)
  passwordLastChanged DateTime 
  /// @kyselyType(Date)
  createdAt DateTime  
  /// @kyselyType(Date)
  updatedAt DateTime  
  workspaces Workspace[]
  memberships WorkspaceMembership[]
  posts Post[]
}

model Workspace {
  id        String   @id  
  ownerId   String
  name      String
  /// @kyselyType(Date)
  createdAt DateTime 
  /// @kyselyType(Date)
  updatedAt DateTime  
  owner User @relation(fields: [ownerId], references: [id])
  roles WorkspaceRole[]
  members WorkspaceMembership[] 
  policies WorkspacePolicy[]
  posts Post[]
}

model WorkspaceRole {
  id        String   @id  
  workspaceId String
  name      String
  /// @kyselyType(Date)
  createdAt DateTime 
  /// @kyselyType(Date)
  updatedAt DateTime  
  workspace Workspace @relation(fields: [workspaceId], references: [id])
  permissions WorkspacePolicy[]
  members WorkspaceMembership[]
}

model WorkspaceMembership {
  id        String   @id  
  userId    String
  workspaceId String
  roleId    String?
  /// @kyselyType(Date)
  createdAt DateTime 
  /// @kyselyType(Date)
  updatedAt DateTime  
  workspace Workspace @relation(fields: [workspaceId], references: [id])
  user User @relation(fields: [userId], references: [id])
  role WorkspaceRole? @relation(fields: [roleId], references: [id])
}

model WorkspacePolicy {
  id        String   @id  
  workspaceId String
  roleId   String? 
  domain WorkspaceDomain // POST
  permissions String? // manage, create, get, update, delete
  /// @kyselyType(Date)
  createdAt DateTime 
  /// @kyselyType(Date)
  updatedAt DateTime  
  workspace Workspace @relation(fields: [workspaceId], references: [id])
  role WorkspaceRole? @relation(fields: [roleId], references: [id])
}

model Post {
  id        String   @id
  authorId  String
  workspaceId String
  content   String
  /// @kyselyType(Date)
  createdAt DateTime 
  /// @kyselyType(Date)
  updatedAt DateTime
  author User @relation(fields: [authorId], references: [id])
  workspace Workspace @relation(fields: [workspaceId], references: [id])
}